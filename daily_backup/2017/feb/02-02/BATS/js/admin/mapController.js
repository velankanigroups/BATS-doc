/*================== Map Script ===================*/
batsAdminHome.controller('smartcontroller', function($scope, $interval, $http, $uibModal,$rootScope,
	$localStorage,$window,$route) {	
	var reqTime=12;
	$scope.token = $localStorage.data;
	$scope.deviceloaded=true;
	$rootScope.menuPos=0;
	$scope.showTrafficLayerBtn = false;
	$scope.hideTrafficLayerBtn = true;
	if (typeof $scope.token === "undefined") {
		swal({
			title : "Un Authorized Access",
			text : "Kindly Login!",
			type : "warning",
			confirmButtonColor : "#ff0000",
			closeOnConfirm : false
		}, function() {
			$localStorage.$reset();
			window.location = apiURL;
		});

	}
	var map;
    var directionDisplay;
    var directionsService;
    var stepDisplay;
    var markers = [];
    var myPolygon;
    var position;
    var marker = null;
    var polyline = null;
    var poly2 = null;
    var speed = 0.000005,
    wait = 1;
    var infowindow = null;
    var timerHandle = null;
    var storedltlng={};
    var trafficLayer = new google.maps.TrafficLayer();
	var Colors = ["#FF0000", "#00FF00", "#0000FF"];
	var carIcon = "M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z";
	var busIcon = "M4.082671,1.570292c-0.096678,0.096678 -0.165733,0.372899 -0.165733,0.621498c0,0.483388 -0.096678,0.593876 -1.091075,1.325863c-0.345277,0.248599 -0.77342,0.718176 -0.966775,1.063453l-0.359088,0.621498l0,40.27309l0,40.27309l0.469576,0.690554c0.26241,0.38671 0.759609,0.883909 1.104886,1.118697l0.635309,0.441954l8.341888,0l8.341888,0l0.497199,-0.303844c0.718176,-0.441954 0.925342,-0.662932 1.353485,-1.422541l0.38671,-0.690554l0.041433,-39.844947c0.027622,-36.143579 0.013811,-39.914002 -0.193355,-40.52169c-0.26241,-0.842475 -0.731987,-1.463974 -1.436352,-1.93355c-0.51101,-0.331466 -0.552443,-0.414332 -0.552443,-0.980586c0,-0.469576 -0.069055,-0.64912 -0.26241,-0.759609c-0.290033,-0.151922 -2.886514,-0.193355 -3.245602,-0.055244c-0.110489,0.041433 -0.248599,0.303844 -0.303844,0.580065c-0.055244,0.290033 -0.165733,0.552443 -0.248599,0.607687c-0.276221,0.193355 -8.438566,0.1243 -8.61811,-0.055244c-0.096678,-0.096678 -0.165733,-0.359088 -0.165733,-0.607687c0,-0.276221 -0.082866,-0.469576 -0.220977,-0.524821c-0.414332,-0.151922 -3.162736,-0.096678 -3.34228,0.082866zm14.888337,3.383713c0.745798,0.276221 1.242997,0.690554 1.242997,1.049642c0,0.220977 -0.64912,1.16013 -1.533029,2.237394c-0.1243,0.151922 -0.497199,0.607687 -0.828664,1.008208l-0.607687,0.731987l-5.372508,0.013811l-5.358697,0l-0.38671,-0.428143c-0.77342,-0.828664 -2.485993,-3.148925 -2.485993,-3.356091c0,-0.276221 0.718176,-0.939153 1.339674,-1.229186c0.483388,-0.220977 1.104886,-0.234788 6.94697,-0.248599c5.66254,-0.013811 6.491205,0.013811 7.043647,0.220977zm2.044039,7.582279l-0.041433,4.958175l-1.270619,0.041433c-1.256808,0.041433 -1.28443,0.027622 -1.312052,-0.276221c-0.013811,-0.179544 -0.027622,-1.436352 -0.055244,-2.803648c-0.013811,-1.367296 -0.069055,-2.803648 -0.110489,-3.176547c-0.096678,-0.635309 -0.069055,-0.731987 0.317655,-1.16013c0.234788,-0.248599 0.428143,-0.51101 0.428143,-0.552443c0,-0.055244 0.165733,-0.276221 0.38671,-0.51101c0.207166,-0.220977 0.621498,-0.704365 0.911531,-1.063453c0.303844,-0.38671 0.580065,-0.621498 0.64912,-0.552443c0.069055,0.069055 0.110489,2.334071 0.096678,5.096286zm-16.283256,-2.997003c0.994397,1.256808 1.132508,1.505407 1.063453,1.850684c-0.041433,0.220977 -0.082866,1.698762 -0.082866,3.287035l0,2.886514l-1.229186,0c-0.994397,0 -1.242997,-0.041433 -1.312052,-0.220977c-0.151922,-0.400521 -0.096678,-8.894331 0.069055,-9.198175c0.082866,-0.151922 0.193355,-0.220977 0.248599,-0.165733c0.069055,0.069055 0.621498,0.77342 1.242997,1.560651zm0.911531,14.377328l0,5.179153l-1.146319,0.041433c-1.118697,0.041433 -1.132508,0.027622 -1.270619,-0.317655c-0.220977,-0.566254 -0.179544,-9.77824 0.027622,-9.985406c0.1243,-0.1243 0.538632,-0.165733 1.28443,-0.138111l1.104886,0.041433l0,5.179153zm15.233614,-5.082475c0.1243,0.1243 0.165733,1.450163 0.165733,5.110097c0,4.737198 -0.013811,4.944364 -0.26241,5.082475c-0.345277,0.179544 -1.947361,0.179544 -2.223583,0c-0.179544,-0.110489 -0.207166,-0.842475 -0.220977,-5.068664c-0.013811,-3.038436 0.041433,-5.01342 0.1243,-5.123908c0.179544,-0.220977 2.18215,-0.234788 2.416938,0zm-5.924951,2.789837c0.110489,0.1243 0.151922,0.787231 0.1243,2.030228l-0.041433,1.850684l-2.969381,0l-2.969381,0l-0.041433,-1.850684c-0.013811,-1.022019 0,-1.947361 0.027622,-2.044039c0.110489,-0.276221 5.648729,-0.26241 5.869706,0.013811zm-9.26723,13.714396l0.027622,5.123908l-1.132508,0.055244c-0.801042,0.027622 -1.173941,-0.013811 -1.312052,-0.138111c-0.234788,-0.234788 -0.26241,-9.557263 -0.027622,-9.985406c0.1243,-0.248599 0.26241,-0.26241 1.270619,-0.234788l1.132508,0.041433l0.041433,5.137719zm15.205992,-5.01342c0.110489,0.1243 0.151922,1.602085 0.1243,5.137719l-0.041433,4.958175l-1.146319,0.041433c-0.662932,0.027622 -1.229186,-0.027622 -1.325863,-0.110489c-0.138111,-0.096678 -0.179544,-1.270619 -0.165733,-4.999609c0.013811,-2.679348 0.069055,-4.958175 0.1243,-5.054853c0.165733,-0.248599 2.223583,-0.234788 2.430749,0.027622zm-15.205992,16.476611c0.013811,2.83127 -0.013811,5.15153 -0.069055,5.15153c-0.787231,0.055244 -2.251205,0.013811 -2.375505,-0.055244c-0.165733,-0.110489 -0.234788,-9.046253 -0.069055,-9.874918l0.096678,-0.441954l1.187752,0.041433l1.187752,0.041433l0.041433,5.137719zm15.205992,-5.01342c0.110489,0.1243 0.151922,1.602085 0.1243,5.137719l-0.041433,4.958175l-1.077264,0.069055c-1.740195,0.110489 -1.574462,0.64912 -1.560651,-5.068664c0.013811,-2.720781 0.069055,-5.027231 0.1243,-5.123908c0.165733,-0.248599 2.223583,-0.234788 2.430749,0.027622zm-5.855895,4.778631l0,2.002606l-2.969381,0l-2.969381,0l-0.041433,-2.044039l-0.041433,-2.030228l3.010814,0.027622l3.010814,0.041433l0,2.002606zm-9.322475,11.808468l0,5.179153l-1.229186,0l-1.215374,0l-0.096678,-0.428143c-0.110489,-0.580065 -0.110489,-9.722996 0.013811,-9.833484c0.041433,-0.055244 0.635309,-0.096678 1.312052,-0.096678l1.215374,0l0,5.179153zm15.261236,0l0,5.110097l-1.215374,0.041433c-1.146319,0.041433 -1.215374,0.027622 -1.325863,-0.276221c-0.082866,-0.248599 -0.1243,-9.847295 -0.027622,-10.026839c0,-0.013811 0.593876,-0.013811 1.298241,0l1.270619,0.041433l0,5.110097zm-15.288858,11.421758l-0.041433,5.15153l-1.187752,0.041433c-1.146319,0.041433 -1.201563,0.027622 -1.28443,-0.276221c-0.110489,-0.414332 -0.110489,-9.543452 0,-9.833484c0.069055,-0.179544 0.317655,-0.220977 1.312052,-0.220977l1.229186,0l-0.027622,5.137719zm15.330292,-0.110489c0.027622,3.535635 -0.013811,5.01342 -0.1243,5.137719c-0.110489,0.138111 -0.497199,0.193355 -1.242997,0.193355c-0.89772,0 -1.104886,-0.041433 -1.201563,-0.248599c-0.151922,-0.303844 -0.138111,-9.695374 0.013811,-9.943973c0.082866,-0.1243 0.455765,-0.165733 1.312052,-0.138111l1.201563,0.041433l0.041433,4.958175zm-6.076872,-2.085472c0.234788,0.276221 0.248599,3.687557 0.013811,3.839478c-0.110489,0.069055 -1.463974,0.110489 -3.024625,0.082866l-2.83127,-0.027622l-0.041433,-1.850684c-0.013811,-1.022019 0,-1.947361 0.027622,-2.044039c0.110489,-0.26241 5.648729,-0.26241 5.855895,0zm-9.308664,8.49381c0.041433,0.069055 0.082866,1.422541 0.096678,3.024625l0.027622,2.914137l-0.676743,0.870098c-0.372899,0.483388 -0.745798,0.966775 -0.842475,1.063453c-0.096678,0.096678 -0.179544,0.248599 -0.179544,0.317655c0,0.082866 -0.165733,0.1243 -0.372899,0.096678c-0.359088,-0.041433 -0.400521,-0.096678 -0.483388,-0.801042c-0.138111,-1.215374 -0.1243,-6.850292 0.027622,-7.237003c0.1243,-0.345277 0.179544,-0.359088 1.229186,-0.359088c0.607687,0 1.132508,0.055244 1.173941,0.110489zm15.192181,0.110489c0.193355,0.179544 0.220977,0.718176 0.220977,3.784234c0,3.245602 -0.027622,3.632312 -0.276221,4.198566c-0.138111,0.345277 -0.290033,0.635309 -0.317655,0.635309c-0.138111,0 -0.662932,-0.580065 -1.450163,-1.602085l-0.856287,-1.118697l0.1243,-0.952964c0.069055,-0.524821 0.096678,-1.767817 0.082866,-2.748404c-0.055244,-2.334071 -0.013811,-2.416938 1.312052,-2.416938c0.676743,0 1.008208,0.055244 1.16013,0.220977zm-3.024625,7.20938c0.151922,0.207166 0.580065,0.745798 0.939153,1.187752c0.359088,0.455765 0.635309,0.925342 0.621498,1.035831c-0.027622,0.110489 -0.248599,0.26241 -0.497199,0.317655c-0.248599,0.069055 -3.494202,0.096678 -7.223191,0.082866c-6.518827,-0.041433 -6.781237,-0.055244 -6.974592,-0.303844c-0.248599,-0.359088 -0.248599,-0.372899 0.1243,-0.77342c0.165733,-0.193355 0.552443,-0.662932 0.856287,-1.035831c0.290033,-0.38671 0.607687,-0.759609 0.690554,-0.828664c0.110489,-0.082866 2.140716,-0.1243 5.676351,-0.096678l5.510618,0.041433l0.276221,0.372899z";
	var truckIcon = "M4.497372,1.246889c-0.180062,0.048016 -0.420144,0.192066 -0.540185,0.312107c-0.480165,0.480165 -0.564194,0.81628 -0.636218,2.472849c0,0.060021 -0.096033,0.096033 -0.216074,0.096033c-0.120041,0 -0.336115,0.084029 -0.480165,0.192066l-0.264091,0.180062l0,4.093405c0,3.757289 0.012004,4.105409 0.216074,4.249458c0.108037,0.084029 0.300103,0.168058 0.420144,0.168058c0.300103,0 0.324111,0.120041 0.360124,1.872643c0.024008,1.512519 0.036012,1.584544 0.360124,2.004688c0.180062,0.240082 0.576198,0.540185 0.864297,0.672231l0.540185,0.240082l0,0.900309l0,0.900309l-1.22442,0.036012l-1.236424,0.036012l-0.060021,2.220762l-0.060021,2.220762l-0.780268,0.072025c-0.96033,0.084029 -1.200412,0.180062 -1.200412,0.516177c-0.036012,4.729623 0.012004,7.922719 0.132045,8.066768c0.084029,0.096033 0.456157,0.168058 0.984338,0.192066l0.864297,0.036012l0,5.161771l0,5.161771l-0.864297,0.036012c-0.528181,0.024008 -0.900309,0.096033 -0.984338,0.192066c-0.192066,0.228078 -0.192066,8.222822 -0.012004,8.402883c0.072025,0.072025 0.516177,0.156054 0.996342,0.192066l0.864297,0.060021l0,4.981709l0,4.981709l-0.828284,0.036012c-0.492169,0.024008 -0.888305,0.096033 -0.984338,0.20407c-0.132045,0.132045 -0.168058,0.936321 -0.168058,4.249458l0,4.0814l0.264091,0.180062c0.180062,0.132045 0.540185,0.192066 1.02035,0.192066c0.516177,0 0.75626,0.048016 0.768264,0.144049c0,0.084029 0,0.768264 -0.012004,1.512519c-0.012004,0.75626 0.036012,1.42849 0.108037,1.500515c0.084029,0.108037 2.44884,0.132045 9.483254,0.108037l9.363213,-0.024008l0.036012,-1.596548l0.036012,-1.584544l0.864297,-0.060021c0.684235,-0.048016 0.900309,-0.108037 1.044358,-0.300103c0.156054,-0.20407 0.180062,-0.864297 0.192066,-4.213446c0,-4.609582 0.060021,-4.369499 -1.152395,-4.369499c-0.396136,0 -0.780268,-0.060021 -0.864297,-0.144049c-0.20407,-0.20407 -0.20407,-9.591291 0,-9.795361c0.084029,-0.084029 0.468161,-0.144049 0.876301,-0.144049c1.200412,0 1.140391,0.228078 1.140391,-4.417516c0,-4.609582 0.072025,-4.345491 -1.140391,-4.345491c-0.636218,0 -0.792272,-0.036012 -0.900309,-0.228078c-0.168058,-0.324111 -0.168058,-9.663316 0,-9.987427c0.108037,-0.192066 0.264091,-0.228078 0.96033,-0.228078c0.696239,0 0.852292,-0.036012 0.96033,-0.228078c0.072025,-0.156054 0.120041,-1.692581 0.120041,-4.201442c0,-3.961359 0,-3.961359 -0.264091,-4.141421c-0.180062,-0.132045 -0.540185,-0.192066 -1.02035,-0.192066c-0.420144,0 -0.768264,-0.012004 -0.780268,-0.036012c-0.012004,-0.012004 -0.048016,-1.02035 -0.084029,-2.24477l-0.072025,-2.220762l-1.1644,-0.036012l-1.176404,-0.036012l0,-0.900309l0,-0.900309l0.516177,-0.228078c0.996342,-0.444152 1.1644,-0.840288 1.1644,-2.736939c0,-1.57254 0.072025,-1.824626 0.480165,-1.824626c0.108037,0 0.288099,-0.096033 0.396136,-0.216074c0.180062,-0.20407 0.20407,-0.660227 0.20407,-4.177433c-0.012004,-4.285471 -0.012004,-4.297475 -0.684235,-4.477536c-0.324111,-0.084029 -0.336115,-0.120041 -0.396136,-0.984338c-0.084029,-0.996342 -0.228078,-1.380474 -0.696239,-1.728593c-0.312107,-0.228078 -0.528181,-0.240082 -7.826686,-0.264091c-4.129417,-0.012004 -7.646624,0.024008 -7.826686,0.084029zm15.017153,5.437866c0.096033,0.120041 0.084029,0.348119 -0.048016,0.864297c-0.108037,0.384132 -0.216074,0.744255 -0.252087,0.792272c-0.036012,0.060021 -3.217104,0.108037 -7.070426,0.108037c-6.87836,0 -7.02241,0 -7.142451,-0.240082c-0.216074,-0.40814 -0.348119,-1.36847 -0.216074,-1.524523c0.192066,-0.240082 14.536988,-0.228078 14.729054,0zm0.732251,2.616898c0,0.576198 -0.072025,1.464503 -0.168058,1.98068c-0.096033,0.528181 -0.216074,1.488511 -0.264091,2.148737l-0.096033,1.200412l-0.096033,-0.720247c-0.132045,-1.056362 0.060021,-4.273466 0.336115,-5.689952c0.120041,-0.600206 0.288099,0.036012 0.288099,1.080371zm-15.773412,0.20407c0.084029,0.708243 0.156054,2.016692 0.144049,2.904997c-0.012004,1.344461 -0.024008,1.488511 -0.096033,0.840288c-0.048016,-0.432148 -0.156054,-0.948325 -0.240082,-1.140391c-0.168058,-0.384132 -0.324111,-3.517207 -0.192066,-3.853322c0.144049,-0.372128 0.240082,-0.060021 0.384132,1.248428zm0.588202,6.626274c0.048016,0.072025 2.520865,0.120041 7.02241,0.120041c4.501545,0 6.974393,-0.048016 7.02241,-0.120041c0.036012,-0.072025 0.156054,-0.120041 0.252087,-0.120041c0.240082,0 0.216074,0.192066 -0.072025,0.480165c-0.240082,0.240082 -0.396136,0.240082 -7.166459,0.240082c-6.26615,0 -6.938381,-0.024008 -7.142451,-0.20407c-0.228078,-0.20407 -0.288099,-0.516177 -0.108037,-0.516177c0.072025,0 0.156054,0.048016 0.192066,0.120041zm13.684696,30.910607l0,24.608444l-6.602265,0l-6.602265,0l-0.036012,-24.488403c-0.012004,-13.468622 0,-24.560428 0.036012,-24.644456c0.036012,-0.120041 1.42849,-0.144049 6.626274,-0.120041l6.578257,0.036012l0,24.608444z";
	var bikeIcon = "M14.036669,0.747647c-0.020005,0.053347 -0.153372,0.12003 -0.293407,0.146703c-0.393432,0.066683 -0.993582,0.466783 -1.286989,0.846879c-0.466783,0.620155 -0.546803,0.926899 -0.580145,2.213887c-0.026673,0.820205 -0.060015,1.16029 -0.126698,1.233642c-0.046678,0.060015 -0.486788,0.306743 -0.973577,0.56014c-0.486788,0.246728 -0.933567,0.473452 -0.986914,0.506793c-0.053347,0.033342 -0.486788,0.293407 -0.966909,0.573477c-0.893557,0.526798 -1.24031,0.766858 -1.620405,1.12028c-0.593482,0.553472 -1.286989,2.794032 -1.306994,4.227724c0,0.353422 -0.033342,0.666833 -0.073352,0.693507c-0.033342,0.026673 -0.366758,0.053347 -0.740185,0.053347c-1.36034,0 -2.027174,0.36009 -3.507544,1.88047c-0.833542,0.860215 -0.873552,0.926899 -0.693507,1.353672c0.106693,0.253397 0.193382,0.286738 1.220305,0.473452c0.406768,0.073352 0.846879,0.100025 1.300325,0.08002c0.646828,-0.020005 0.72018,-0.04001 1.253647,-0.306743c0.380095,-0.186713 0.733517,-0.433442 1.066934,-0.740185c0.273402,-0.253397 0.52013,-0.446778 0.553472,-0.426773c0.026673,0.013337 0.046678,0.253397 0.046678,0.52013c0,0.406768 -0.020005,0.506793 -0.113362,0.553472c-0.12003,0.066683 -0.766858,0.28007 -2.920731,0.980245c-1.373677,0.446778 -1.567059,0.580145 -1.567059,1.046929c0,0.153372 0.060015,0.366758 0.133367,0.486788l0.133367,0.220055l-0.300075,0.353422c-0.52013,0.613487 -0.500125,0.340085 -0.500125,6.474953c0,4.487789 0.020005,5.474703 0.093357,5.734768c0.093357,0.306743 0.253397,0.60015 0.420105,0.773527c0.066683,0.066683 0.073352,0.24006 0.046678,0.646828c-0.066683,0.846879 0.046678,1.113612 0.84021,1.900475c0.626823,0.626823 2.020505,1.940485 2.867384,2.700676c0.24006,0.213387 0.633492,0.580145 0.873552,0.813537c0.246728,0.24006 0.580145,0.553472 0.753522,0.700175l0.306743,0.273402l0,0.753522c0,1.180295 0.213387,1.893807 0.820205,2.680671l0.266733,0.353422l-0.133367,0.146703c-0.393432,0.446778 -0.713512,1.180295 -0.826873,1.907144c-0.026673,0.206718 -0.086688,0.580145 -0.133367,0.84021c-0.086688,0.533467 -0.046678,1.92048 0.073352,2.533967c0.246728,1.253647 0.56014,2.127199 1.060265,2.967409c0.073352,0.126698 0.16004,0.28007 0.186713,0.333417c0.020005,0.053347 0.12003,0.206718 0.213387,0.333417c0.386763,0.513462 0.386763,0.533467 0.140035,2.267234c-0.033342,0.24006 -0.08002,0.613487 -0.100025,0.833542c-0.026673,0.220055 -0.086688,0.713512 -0.133367,1.100275c-0.286738,2.227224 -0.293407,2.687339 -0.066683,3.160791c0.293407,0.606818 1.00025,1.04026 1.693757,1.04026c0.48012,0 0.893557,-0.166708 1.273652,-0.506793c0.373427,-0.333417 0.526798,-0.660165 0.60015,-1.273652c0.086688,-0.646828 0.153372,-0.72018 0.386763,-0.44011c0.100025,0.12003 0.420105,0.500125 0.706843,0.853547c0.293407,0.346753 0.553472,0.633492 0.580145,0.633492c0.033342,0 0.093357,-0.066683 0.133367,-0.146703c0.046678,-0.086688 0.16004,-0.213387 0.253397,-0.286738c0.093357,-0.073352 0.420105,-0.386763 0.726848,-0.700175c0.573477,-0.586813 0.673502,-0.613487 0.68017,-0.20005c0.006668,0.253397 0.166708,0.88022 0.286738,1.106944c0.146703,0.286738 0.60015,0.68017 0.96024,0.833542c0.84021,0.36009 1.913812,-0.046678 2.373927,-0.900225c0.126698,-0.24006 0.146703,-0.373427 0.140035,-1.04026c-0.006668,-0.420105 -0.046678,-1.006919 -0.093357,-1.300325c-0.04001,-0.293407 -0.12003,-0.906894 -0.173377,-1.367009c-0.053347,-0.460115 -0.126698,-1.060265 -0.16004,-1.333667c-0.026673,-0.273402 -0.086688,-0.693507 -0.126698,-0.933567c-0.12003,-0.733517 -0.100025,-0.853547 0.226723,-1.333667c0.346753,-0.52013 0.826873,-1.40035 0.953572,-1.733767c0.073352,-0.206718 0.213387,-0.633492 0.420105,-1.306994c0.093357,-0.32008 0.20005,-1.126949 0.24006,-1.893807c0.04001,-0.826873 -0.106693,-2.100525 -0.313412,-2.700676c-0.08002,-0.220055 -0.16004,-0.460115 -0.180045,-0.533467c-0.053347,-0.180045 -0.453447,-0.780195 -0.620155,-0.933567c-0.073352,-0.066683 -0.133367,-0.146703 -0.133367,-0.180045c0,-0.033342 0.12003,-0.206718 0.266733,-0.380095c0.146703,-0.173377 0.266733,-0.340085 0.266733,-0.373427c0,-0.033342 0.04001,-0.106693 0.093357,-0.16004c0.166708,-0.180045 0.446778,-1.153622 0.486788,-1.673752c0.020005,-0.273402 0.006668,-0.666833 -0.033342,-0.866884c-0.073352,-0.380095 -0.04001,-0.513462 0.180045,-0.72018c0.246728,-0.24006 1.073602,-1.013587 1.873802,-1.753772c3.174127,-2.947404 3.067434,-2.834042 3.247479,-3.527549c0.08002,-0.300075 0.086688,-0.433442 0.020005,-0.740185c-0.08002,-0.366758 -0.073352,-0.393432 0.08002,-0.606818c0.453447,-0.606818 0.420105,-0.08002 0.44011,-6.381596l0.013337,-5.694758l-0.206718,-0.420105c-0.113362,-0.233392 -0.226723,-0.426773 -0.260065,-0.426773c-0.033342,0 -0.08002,-0.060015 -0.100025,-0.140035c-0.033342,-0.106693 0.006668,-0.186713 0.16004,-0.333417c0.180045,-0.16004 0.206718,-0.226723 0.206718,-0.546803c0,-0.52013 -0.140035,-0.620155 -1.433692,-1.04026c-0.586813,-0.186713 -1.493707,-0.48012 -2.007169,-0.653497l-0.946904,-0.306743l-0.033342,-0.473452c-0.020005,-0.260065 -0.006668,-0.500125 0.020005,-0.533467c0.033342,-0.033342 0.246728,0.113362 0.493457,0.340085c0.52013,0.466783 1.013587,0.773527 1.527049,0.953572c0.460115,0.16004 1.393682,0.180045 2.12053,0.04001c0.273402,-0.053347 0.606818,-0.113362 0.740185,-0.140035c0.346753,-0.053347 0.506793,-0.213387 0.553472,-0.566808l0.04001,-0.300075l-0.68017,-0.72018c-0.606818,-0.64016 -1.48037,-1.393682 -1.92048,-1.633742c-0.353422,-0.20005 -0.813537,-0.300075 -1.607069,-0.340085l-0.833542,-0.04001l-0.013337,-0.433442c-0.020005,-0.513462 -0.186713,-1.633742 -0.326748,-2.107194c-0.053347,-0.186713 -0.093357,-0.4001 -0.093357,-0.48012c0,-0.073352 -0.026673,-0.153372 -0.060015,-0.180045c-0.033342,-0.020005 -0.086688,-0.133367 -0.113362,-0.246728c-0.073352,-0.340085 -0.453447,-1.133617 -0.660165,-1.373677c-0.260065,-0.313412 -0.726848,-0.64016 -1.733767,-1.24031c-0.473452,-0.28007 -0.913562,-0.540135 -0.966909,-0.573477c-0.053347,-0.033342 -0.346753,-0.180045 -0.646828,-0.333417c-0.300075,-0.146703 -0.566808,-0.300075 -0.586813,-0.333417c-0.020005,-0.04001 -0.100025,-0.066683 -0.166708,-0.066683c-0.273402,0 -0.333417,-0.233392 -0.333417,-1.28032c0,-1.246979 -0.100025,-1.72043 -0.506793,-2.327249c-0.340085,-0.513462 -0.866884,-0.906894 -1.340335,-1.006919c-0.16004,-0.04001 -0.313412,-0.106693 -0.333417,-0.16004c-0.046678,-0.12003 -0.393432,-0.12003 -0.44011,0zm-3.207469,9.162292c0.64016,0 2.453947,0.053347 3.527549,0.106693c0.293407,0.020005 0.586813,0.033342 0.653497,0.026673c0.213387,0 0.746853,0.013337 1.347004,0.04001c0.333417,0.013337 0.966909,0.033342 1.420355,0.046678c0.813537,0.020005 0.820205,0.020005 0.860215,0.186713c0.020005,0.100025 0.08002,0.233392 0.126698,0.306743c0.053347,0.073352 0.093357,0.180045 0.093357,0.246728c0,0.060015 0.04001,0.213387 0.093357,0.333417c0.086688,0.206718 0.146703,0.413437 0.393432,1.32033c0.140035,0.506793 0.206718,1.44036 0.113362,1.500375c-0.04001,0.026673 -0.106693,0.013337 -0.153372,-0.020005c-0.046678,-0.04001 -0.20005,-0.086688 -0.346753,-0.113362c-0.146703,-0.026673 -0.386763,-0.086688 -0.533467,-0.133367c-0.820205,-0.260065 -0.773527,-0.253397 -1.967159,-0.466783c-1.987164,-0.36009 -3.007419,-0.433442 -4.034342,-0.293407c-1.32033,0.180045 -2.353922,0.406768 -2.714012,0.60015c-0.066683,0.033342 -0.153372,0.060015 -0.20005,0.060015c-0.046678,0.006668 -0.206718,0.060015 -0.353422,0.133367c-0.36009,0.173377 -0.500125,0.173377 -0.500125,-0.020005c0.006668,-0.233392 0.173377,-1.253647 0.260065,-1.580395c0.24006,-0.860215 0.293407,-1.046929 0.380095,-1.220305c0.053347,-0.106693 0.093357,-0.260065 0.093357,-0.346753c0,-0.08002 0.04001,-0.186713 0.093357,-0.226723c0.053347,-0.046678 0.113362,-0.186713 0.140035,-0.313412c0.026673,-0.166708 0.066683,-0.226723 0.140035,-0.20005c0.066683,0.026673 0.093357,-0.013337 0.093357,-0.140035l0,-0.173377l0.16004,0.173377c0.153372,0.16004 0.193382,0.173377 0.813537,0.166708zm-4.614488,8.308745c0.073352,0.186713 0.153372,0.246728 0.366758,0.306743c0.146703,0.04001 0.286738,0.100025 0.306743,0.133367c0.020005,0.04001 0.106693,0.066683 0.186713,0.066683c0.206718,0 0.48012,0.20005 0.68017,0.486788c0.093357,0.140035 0.166708,0.266733 0.166708,0.286738c0,0.013337 -0.073352,0.060015 -0.166708,0.093357c-0.100025,0.04001 -0.180045,0.133367 -0.206718,0.246728c-0.026673,0.100025 -0.146703,0.500125 -0.273402,0.886889c-0.220055,0.673502 -0.380095,1.246979 -0.593482,2.100525c-0.20005,0.826873 -0.286738,2.087189 -0.333417,4.934568c-0.04001,2.287239 -0.033342,2.900726 0.04001,3.034092c0.046678,0.093357 0.52013,0.820205 1.046929,1.620405c0.773527,1.16029 0.993582,1.44036 1.086939,1.413687c0.140035,-0.046678 0.4001,0.24006 0.64016,0.706843c0.20005,0.4001 0.306743,1.326999 0.153372,1.326999c-0.053347,0 -0.28007,-0.173377 -0.500125,-0.386763c-1.700425,-1.587064 -3.580896,-3.334167 -4.014337,-3.727599l-0.213387,-0.193382l-0.020005,-5.694758l-0.013337,-5.701426l-0.173377,-0.333417c-0.100025,-0.186713 -0.333417,-0.473452 -0.526798,-0.646828c-0.333417,-0.300075 -0.380095,-0.453447 -0.146703,-0.453447c0.086688,0 1.413687,-0.420105 2.08052,-0.660165c0.28007,-0.100025 0.326748,-0.08002 0.426773,0.153372zm16.204053,-0.16004c1.860465,0.60015 1.820455,0.586813 1.867134,0.706843c0.020005,0.060015 -0.04001,0.126698 -0.180045,0.186713c-0.266733,0.106693 -0.613487,0.500125 -0.8002,0.900225c-0.146703,0.306743 -0.146703,0.326748 -0.16004,5.974828l-0.013337,5.668084l-0.186713,0.16004c-0.100025,0.086688 -0.333417,0.293407 -0.52013,0.466783c-0.180045,0.173377 -0.72018,0.673502 -1.2003,1.106944c-0.473452,0.44011 -1.073602,0.993582 -1.326999,1.233642c-0.260065,0.24006 -0.566808,0.533467 -0.693507,0.646828c-0.380095,0.36009 -0.466783,0.273402 -0.286738,-0.273402c0.166708,-0.52013 0.393432,-0.833542 0.686838,-0.96024c0.213387,-0.100025 0.393432,-0.333417 1.226974,-1.580395l0.973577,-1.467034l-0.033342,-3.467534c-0.026673,-3.167459 -0.04001,-3.520881 -0.166708,-4.067684c-0.186713,-0.84021 -0.28007,-1.226974 -0.380095,-1.533717c-0.046678,-0.146703 -0.133367,-0.446778 -0.20005,-0.666833c-0.066683,-0.220055 -0.153372,-0.506793 -0.206718,-0.633492c-0.046678,-0.126698 -0.100025,-0.313412 -0.12003,-0.413437c-0.020005,-0.093357 -0.12003,-0.266733 -0.213387,-0.380095c-0.186713,-0.226723 -0.206718,-0.593482 -0.026673,-0.673502c0.053347,-0.026673 0.20005,-0.093357 0.32008,-0.153372c0.126698,-0.060015 0.260065,-0.113362 0.313412,-0.113362c0.046678,0 0.253397,-0.073352 0.460115,-0.166708c0.313412,-0.140035 0.386763,-0.20005 0.413437,-0.366758c0.046678,-0.213387 0.126698,-0.24006 0.453447,-0.133367zm-7.161791,7.835293c0.713512,0.233392 1.64041,0.993582 2.073852,1.700425c0.12003,0.20005 0.246728,0.373427 0.273402,0.386763c0.026673,0.013337 0.053347,0.053347 0.053347,0.086688c0,0.066683 0.226723,0.606818 0.333417,0.806868c0.193382,0.346753 0.486788,2.180545 0.446778,2.787364c-0.046678,0.666833 -0.193382,1.627074 -0.253397,1.700425c-0.033342,0.033342 -0.060015,0.113362 -0.060015,0.186713c0,0.066683 -0.106693,0.373427 -0.233392,0.686838c-0.56014,1.353672 -1.44036,2.273902 -2.600651,2.727349c-0.473452,0.186713 -1.72043,0.186713 -2.20055,0.006668c-0.52013,-0.20005 -1.193632,-0.673502 -1.580395,-1.113612c-0.4001,-0.453447 -0.893557,-1.233642 -0.96024,-1.507044c-0.026673,-0.106693 -0.066683,-0.220055 -0.086688,-0.253397c-0.066683,-0.100025 -0.246728,-0.733517 -0.373427,-1.286989c-0.146703,-0.653497 -0.146703,-2.113862 0,-2.760691c0.12003,-0.540135 0.293407,-1.166959 0.366758,-1.32033c0.12003,-0.260065 0.566808,-1.106944 0.613487,-1.166959c0.206718,-0.273402 0.820205,-0.946904 0.900225,-0.993582c0.060015,-0.033342 0.166708,-0.113362 0.246728,-0.180045c0.266733,-0.233392 0.926899,-0.526798 1.373677,-0.613487c0.333417,-0.066683 1.306994,0 1.667084,0.12003z M13.143112,27.380976c-0.193382,0.066683 -0.386763,0.153372 -0.433442,0.20005c-0.04001,0.04001 -0.12003,0.08002 -0.166708,0.08002c-0.313412,0 -1.420355,1.093607 -1.753772,1.733767c-0.086688,0.16004 -0.213387,2.273902 -0.146703,2.447279c0.060015,0.180045 0.546803,0.026673 0.546803,-0.173377c0,-0.026673 0.173377,-0.226723 0.386763,-0.446778c0.500125,-0.52013 1.2003,-0.973577 1.780445,-1.153622c0.260065,-0.08002 0.56014,-0.173377 0.673502,-0.213387c0.466783,-0.140035 1.773777,-0.013337 2.060515,0.206718c0.04001,0.026673 0.140035,0.073352 0.233392,0.100025c0.266733,0.086688 1.28032,1.146954 1.367009,1.44036c0.060015,0.20005 0.226723,0.393432 0.333417,0.393432c0.24006,0 0.24006,-0.253397 -0.006668,-2.033842c-0.093357,-0.68017 -0.146703,-0.853547 -0.326748,-1.133617c-0.260065,-0.406768 -1.053597,-1.020255 -1.567059,-1.206969c-0.20005,-0.08002 -0.473452,-0.173377 -0.60015,-0.220055c-0.126698,-0.046678 -0.64016,-0.100025 -1.133617,-0.113362c-0.733517,-0.020005 -0.966909,-0.006668 -1.246979,0.093357z";
	//var markerIcon = "M31.809992,17.113449c-0.001888,-8.347025 -6.76548,-15.113449 -15.110806,-15.113449c-8.348912,0 -15.116186,6.766424 -15.116186,15.113449c0,7.204499 11.258558,26.452334 14.343395,31.58728c0.162355,0.272039 0.455538,0.438075 0.771941,0.438075c0.316309,0 0.61053,-0.166036 0.770997,-0.437131c3.08295,-5.134946 14.340658,-24.383725 14.340658,-31.588224zm-15.111655,11.693896c-6.447283,0 -11.696633,-5.245668 -11.696633,-11.694745c0,-6.448227 5.247462,-11.694745 11.696633,-11.694745s11.692952,5.246518 11.692952,11.694745s-5.244724,11.694745 -11.692952,11.694745z";
	var markerIcon="M229.284 41.646 L 227.077 44.269 229.338 45.210 C 232.277 46.432,235.490 45.217,234.426 43.286 C 232.048 38.971,231.644 38.842,229.284 41.646 M155.600 44.000 C 155.306 44.475,156.180 44.777,157.753 44.744 C 159.959 44.697,160.133 44.573,158.800 44.000 C 156.630 43.067,156.176 43.067,155.600 44.000 M120.400 57.600 C 120.128 58.040,120.197 58.406,120.553 58.412 C 120.909 58.419,120.670 58.759,120.023 59.169 C 119.376 59.578,119.076 60.143,119.357 60.423 C 119.637 60.704,120.587 60.213,121.467 59.333 C 122.347 58.453,122.857 57.523,122.600 57.267 C 121.896 56.562,120.953 56.705,120.400 57.600 M119.529 81.249 C 119.886 91.498,120.282 92.036,128.253 93.106 C 131.846 93.589,132.007 92.038,128.462 91.090 C 123.913 89.873,121.204 85.714,119.935 78.000 C 119.399 74.741,119.324 75.342,119.529 81.249 M267.684 83.935 C 266.987 89.187,265.240 91.122,259.971 92.474 L 255.600 93.595 260.705 93.264 C 267.010 92.855,267.690 92.158,268.378 85.400 C 269.009 79.193,268.466 78.044,267.684 83.935"; 
	var car = "M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z";
	var vehicleType;
	var icon = {
	    path: markerIcon,
	    scale: .7,
	    strokeColor: 'white',
	    strokeWeight: 0,
	    fillOpacity: 1,
	    fillColor: '#f44336',
	    offset: '5%',
	    // rotation: parseInt(heading[i]),
	    anchor: new google.maps.Point(10, 25) // orig 10,50 back of car, 10,0
												// front of car, 10,25 center of
												// car
	};
	$scope.httpLoading=false;
	
	  // function initialize(){
	  $scope.initialize=function () {    
		  var $map = $('#map_canvas');
		  infowindow = new google.maps.InfoWindow(
		    {  
		      size: new google.maps.Size(150,50)
		    });
		    var styleMap = [{"featureType":"administrative","elementType":"labels","stylers":[{"visibility":"on"}]},{"featureType":"administrative","elementType":"labels.text.fill","stylers":[{"color":"#444444"}]},{"featureType":"landscape","elementType":"all","stylers":[{"color":"#f2f2f2"}]},{"featureType":"landscape","elementType":"labels","stylers":[{"visibility":"on"}]},{"featureType":"poi","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"poi","elementType":"geometry.fill","stylers":[{"color":"#bee4f4"},{"visibility":"on"}]},{"featureType":"poi","elementType":"labels","stylers":[{"visibility":"on"},{"hue":"#ff0000"}]},{"featureType":"road","elementType":"all","stylers":[{"saturation":-100},{"lightness":45}]},{"featureType":"road","elementType":"labels","stylers":[{"visibility":"on"},{"hue":"#ff0000"}]},{"featureType":"road.highway","elementType":"all","stylers":[{"visibility":"simplified"}]},{"featureType":"road.arterial","elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"all","stylers":[{"visibility":"off"}]},{"featureType":"transit","elementType":"geometry.fill","stylers":[{"visibility":"on"}]},{"featureType":"transit","elementType":"labels","stylers":[{"visibility":"on"},{"hue":"#ff0000"}]},{"featureType":"water","elementType":"all","stylers":[{"color":"#46bcec"},{"visibility":"on"}]},{"featureType":"water","elementType":"labels","stylers":[{"visibility":"on"},{"color":"#000000"}]}]; 
		    var myOptions = {
		      zoom: 16,
		      mapTypeId: google.maps.MapTypeId.ROADMAP
		    };
		    // console.log(document.getElementById("map_canvas"));
		    map = new google.maps.Map(document.getElementById("map_canvas"), myOptions);
		    address = 'India';
		    // address = 'Trinidad and Tobago'
		    geocoder = new google.maps.Geocoder();
		    geocoder.geocode( { 'address': address}, function(results, status) {
		     map.fitBounds(results[0].geometry.viewport);

		    });	
		 // Instantiate a directions service.
		    directionsService = new google.maps.DirectionsService();
		 // Create a renderer for directions and bind it to the map.
	        var rendererOptions = {
	            map: map
	        };
	        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);
		    polyline = new google.maps.Polyline({
		        path: [],
		        strokeColor: '#FF0000',
		        strokeWeight: 0
		    });
		    poly2 = new google.maps.Polyline({
		        path: [],
		        strokeColor: '#FF0000',
		        strokeWeight: 0
		    });
		    /*
			 * google map default zoom_changed event
			 * */
		    $scope.zoomlevel=0;
			google.maps.event.addListener(map, 'zoom_changed', function() {
			    $scope.zoomlevel = map.getZoom();    			    
			});
			function wheelEvent( event ) {
				console.log($scope.zoomlevel);
				console.log($scope.deviceId);
				if(typeof $scope.deviceId !='undefined'){
					if ($scope.zoomlevel < 18 || $scope.zoomlevel > 21) {
						
						$scope.singleDeviceZoomed = false;
						if (angular.isDefined(singleDeviceInterval)) {
							$interval.cancel(singleDeviceInterval);
						} else if (angular.isDefined(multiDeviceInterval)) {
							$interval.cancel(multiDeviceInterval);
						}
					}
				}			
		    }
		    
		    $map[0].addEventListener( 'mousewheel', wheelEvent, true );
		    $map[0].addEventListener( 'DOMMouseScroll', wheelEvent, true );
		  };
    $scope.resizeMap = function(){
    	$("#map_canvas").css("position", 'fixed').
        css('top', 0).
        css('left', 0).
        css("width", '100%').
        css("height", '100%');
    	console.log("resize");
    	google.maps.event.trigger(map, 'resize');
    	map.setZoom(map.getZoom());
    }
    
    
    $scope.shrinkMap=function(){
    	$("#map_canvas").css("position", 'absolute').
        css('top', 0).
        css('left', 0).
        css("width", '100%').
        css("height", '100%');
    	google.maps.event.trigger(map, 'resize');
    	map.setZoom(map.getZoom());
    }
	function createMarker(latlng, deviceID,vehNo,vehModel, html,type) {
		// console.log(deviceID+"=="+type);
		var contentString; 
		if(type==0){icon.fillColor='#f44336';}
		else if(type==1){icon.fillColor='#ffde01';}
		else if(type==2){icon.fillColor='#e59305';}
		else if(type==3){icon.fillColor='#043a08';}
		else if(type==4){icon.fillColor='#0540E5';}
		var geocoder = new google.maps.Geocoder();		
		geocoder.geocode({       
		        latLng: latlng     
		        }, 
		        function(responses) 
		        {     
		           if (responses && responses.length > 0) 
		           {     	   
		        	   if(html.length==0){
		        		   // console.log(html.length);
		        		   html=responses[0].formatted_address;
		        		   contentString  = '<b><label>Device ID:</label> '+deviceID+'</b><br><br><b><label>Vehicle No:</label> '+vehNo+'</b><br><br><b><label>Vehicle Model:</label> '+vehModel+'</b><br><br>'+html+'<br><br><button class="btn btn-primary btn-sm" id="infoClick" data-deviceID="'+deviceID+'">show detail</button>';	
		        	   }		        	   		                    
		           } 
		           else 
		           {       
		             // swal('Not getting Any address for given latitude and
						// longitude.');
		           }   
		        }
		);
		if(html.length!=0){
			contentString  = '<b><label>Device ID:</label> '+deviceID+'</b><br><br><b><label>Vehicle No:</label> '+vehNo+'</b><br><br><b><label>Vehicle Model:</label> '+vehModel+'</b><br><br>'+html+'<br><br><button class="btn btn-primary btn-sm" id="infoClick" data-deviceID="'+deviceID+'">show detail</button>';
		}
		
		    
		    var marker = new google.maps.Marker({
		        position: latlng,
		        map: map,
		        title: deviceID, 
		        icon:icon,       
		        zIndex: Math.round(latlng.lat()*-100000)<<5
		        });
		        marker.myname = deviceID;
		        markers.push(marker);

		    google.maps.event.addListener(marker, 'click', function() {
		    	 /*
					 * calling map modal controller function from here using
					 * $emit ref links
					 * http://stackoverflow.com/questions/29467339/how-to-call-function-in-another-controller-in-angularjs
					 * http://stackoverflow.com/questions/21346565/how-to-pass-an-object-using-rootscope
					 */	    	 
		        infowindow.setContent(contentString); 
		        infowindow.open(map,marker);
		       // $rootScope.$emit("deviceDetailModal",lg,deviceID);
		       // $scope.open("lg",deviceID);
		        });
		    return marker;
		}	
	// Sets the map on all markers in the array.
    function setMapOnAll(map) {
      for (var i = 0; i < markers.length; i++) {
        markers[i].setMap(map);
      }
    }
    function setPolygonNull(){
    	myPolygon.setMap(null);
    }
	
	$(document).on('click','#infoClick',function(event){
		 event.stopImmediatePropagation();
		console.log("Check click"+$(this).attr('class'));		
		if(typeof $scope.deviceId=='undefined'){
			$scope.open("lg",$(this).attr("data-deviceID"));
		}
		else{
			$scope.open("lg",$scope.deviceId);	
		}
		
	});	 

	/*
	 * -----------------------------------------code for vehicle icon
	 * movement---------------------------------------------------------------
	 * 
	 */
	
	$scope.calcRoute = function(dataVal) {
		/**
		 * check for storedltlng object is initialized or not if initalized
		 * follow the next step else intialize the storedltlng check for
		 * storedltlng key "lat" value is not equal to current data values lat
		 * if not allow movement of vehichle operation else update start and end
		 * with same current data lat and lng ex: dataVal[0].values.lat and .lng
		 * for both start and end
		 */
		if(typeof storedltlng.lat!='undefined'){
			if(storedltlng.lat!=dataVal[0].values[0].lat){
				if(dataVal[0].values[0].type==4){
					console.log("--------------------Different lat lng of "+dataVal[0].values[0].type+" ------------------------------");
					console.log("start : ",storedltlng.lat,"end :",dataVal[0].values[0].lat);
					vehichleRouting(dataVal,storedltlng.lat,storedltlng.lng,storedltlng.lat,storedltlng.lng);
				}
				
				else{
					console.log("--------------------Different lat lng------------------------------");
					console.log("start : ",storedltlng.lat,"end :",dataVal[0].values[0].lat);
					vehichleRouting(dataVal,storedltlng.lat,storedltlng.lng,dataVal[0].values[0].lat,dataVal[0].values[0].long);
			        storedltlng.lat=dataVal[0].values[0].lat;
					storedltlng.lng=dataVal[0].values[0].long;
				}
			}
			else{
				var startLat=dataVal[0].values[0].lat;
				var startLng=dataVal[0].values[0].long;
				var endLat=dataVal[0].values[0].lat;
				var endLng=dataVal[0].values[0].long;
				vehichleRouting(dataVal,startLat,startLng,endLat,endLng)
				console.log("-----------------EQUAL / SAME LAT------------------------")
				console.log("start : ",storedltlng.lat,"end :",dataVal[0].values[0].lat);
			
			}
		}		
		else{
			storedltlng.lat=dataVal[0].values[0].lat;
			storedltlng.lng=dataVal[0].values[0].long;
			var startLat=dataVal[0].values[0].lat;
			var startLng=dataVal[0].values[0].long;
			var endLat=dataVal[0].values[0].lat;
			var endLng=dataVal[0].values[0].long;
			vehichleRouting(dataVal,startLat,startLng,endLat,endLng)
		}
	 
	};

	function vehichleRouting(dataVal,startLat,startLng,endLat,endLng){
		// console.log(startLat,startLng,endLat,endLng);
		if (timerHandle) {
            clearTimeout(timerHandle);
        }
        if (marker) {
            marker.setMap(null);
        }
        polyline.setMap(null);
        poly2.setMap(null);
        directionsDisplay.setMap(null);
        polyline = new google.maps.Polyline({
            path: [],
            strokeColor: '#FFFFFF',
            strokeWeight: 0
        });
        poly2 = new google.maps.Polyline({
            path: [],
            strokeColor: '#FFFFFF',
            strokeWeight: 0
        });
        // Create a renderer for directions and bind it to the map.
        var rendererOptions = {
            map: map
        };
        directionsDisplay = new google.maps.DirectionsRenderer(rendererOptions);

        var start = new google.maps.LatLng({lat: Number(startLat), lng: Number(startLng)}); // document.getElementById("start").value;
        var end = new google.maps.LatLng({lat: Number(endLat), lng: Number(endLng)}); // document.getElementById("end").value;
        var travelMode = google.maps.DirectionsTravelMode.DRIVING;

        var request = {
            origin: start,
            destination: end,
            travelMode: travelMode
        };

        // Route the directions and pass the response to a
        // function to create markers for each step.
        directionsService.route(request, function (response, status) {
            // console.log(response.routes[0]);
            if (status == google.maps.DirectionsStatus.OK) {
                // directionsDisplay.setDirections(response);

                var bounds = new google.maps.LatLngBounds();
                var route = response.routes[0];
                startLocation = new Object();
                endLocation = new Object();

                // For each route, display summary information.
                var path = response.routes[0].overview_path;
                var legs = response.routes[0].legs;
                for (i = 0; i < legs.length; i++) {
                    if (i === 0) {
                        // console.log(JSON.stringify(legs[i].start_location));
                        startLocation.latlng = legs[i].start_location;
                        startLocation.address = legs[i].start_address;												   
                          marker = createMarker(legs[i].start_location,dataVal[i].devid,dataVal[i].vehicle_num,dataVal[i].vehicle_model,legs[i].start_address,dataVal[i].values[0].type);
                      }
                      endLocation.latlng = legs[i].end_location;
                      endLocation.address = legs[i].end_address;
                      var steps = legs[i].steps;
                    // console.log(JSON.stringify(steps));
                    for (j = 0; j < steps.length; j++) {
                        var nextSegment = steps[j].path;
                        for (k = 0; k < nextSegment.length; k++) {
                            polyline.getPath().push(nextSegment[k]);
                            bounds.extend(nextSegment[k]);
                        }
                    }
                }
                polyline.setMap(map);
                map.fitBounds(bounds);
                console.log(map.getZoom());
                map.setZoom(map.getZoom());
                startAnimation();                
            }
        });
	}

	var step = 50; // 5; // metres
	var tick = 1000; // milliseconds
	var eol;
	var k = 0;
	var stepnum = 0;
	var speed = "";
	var lastVertex = 1;

	// =============== animation functions ======================
	function updatePoly(d) {
	    // Spawn a new polyline every 20 vertices, because updating a 100-vertex
		// poly is too slow
	    if (poly2.getPath().getLength() > 20) {
	        poly2 = new google.maps.Polyline([polyline.getPath().getAt(lastVertex - 1)]);
	        // map.addOverlay(poly2)
	    }

	    if (polyline.GetIndexAtDistance(d) < lastVertex + 2) {
	        if (poly2.getPath().getLength() > 1) {
	            poly2.getPath().removeAt(poly2.getPath().getLength() - 1);
	        }
	        poly2.getPath().insertAt(poly2.getPath().getLength(), polyline.GetPointAtDistance(d));
	    } else {
	        poly2.getPath().insertAt(poly2.getPath().getLength(), endLocation.latlng);
	    }
	}

	$scope.animate = function(d) {
	  // console.log(d);
	  if (d > eol) {        
	    map.panTo(endLocation.latlng);
	    marker.setPosition(endLocation.latlng);
	    return;
	}
	var p = polyline.GetPointAtDistance(d);
	map.panTo(p);
	var lastPosn = marker.getPosition();
	marker.setPosition(p);
	var heading = google.maps.geometry.spherical.computeHeading(lastPosn, p);
	icon.rotation = heading;
	marker.setIcon(icon);
	updatePoly(d);
	    // timerHandle = setTimeout("animate(" + (d + step) + ")", tick);
	    
	    timerHandle = setTimeout(function() {
	        $scope.animate(d + step);
	    }, tick);
	}

	function startAnimation() {
	    eol = polyline.Distance();
	    map.setCenter(polyline.getPath().getAt(0));
	   /*
		 * marker = new google.maps.Marker({ position:
		 * polyline.getPath().getAt(0), map: map, icon: icon });
		 */

	    poly2 = new google.maps.Polyline({
	        path: [polyline.getPath().getAt(0)],
	        strokeColor: "#0000FF",
	        strokeWeight: 0
	    });
	    // map.addOverlay(poly2);
	    // setTimeout("animate(50)", 2000); // Allow time for the initial map
		// display
	    
	    setTimeout(function() {
	        $scope.animate(50);
	    }, 2000);
	    

	}
	// ----------------------------------------------------------------------------
	// =============== ~animation funcitons =====================
	/***************************************************************************
	 * *******************************************************************\ *
	 * epolys.js by Mike Williams * updated to API v3 by Larry Ross * * A Google
	 * Maps API Extension * * Adds various Methods to google.maps.Polygon and
	 * google.maps.Polyline * * .Contains(latlng) returns true is the poly
	 * contains the specified * GLatLng * * .Area() returns the approximate area
	 * of a poly that is * not self-intersecting * * .Distance() returns the
	 * length of the poly path * * .Bounds() returns a GLatLngBounds that bounds
	 * the poly * * .GetPointAtDistance() returns a GLatLng at the specified
	 * distance * along the path. * The distance is specified in metres * Reurns
	 * null if the path is shorter than that * * .GetPointsAtDistance() returns
	 * an array of GLatLngs at the * specified interval along the path. * The
	 * distance is specified in metres * * .GetIndexAtDistance() returns the
	 * vertex number at the specified * distance along the path. * The distance
	 * is specified in metres * Returns null if the path is shorter than that * *
	 * .Bearing(v1?,v2?) returns the bearing between two vertices * if v1 is
	 * null, returns bearing from first to last * if v2 is null, returns bearing
	 * from v1 to next * * *
	 * ********************************************************************** *
	 * This Javascript is provided by Mike Williams * Blackpool Community Church
	 * Javascript Team * http://www.blackpoolchurch.org/ *
	 * http://econym.org.uk/gmap/ * * This work is licenced under a Creative
	 * Commons Licence * http://creativecommons.org/licenses/by/2.0/uk/ * *
	 * ********************************************************************** *
	 * Version 1.1 6-Jun-2007 * Version 1.2 1-Jul-2007 - fix: Bounds was
	 * omitting vertex zero * add: Bearing * Version 1.3 28-Nov-2008 add:
	 * GetPointsAtDistance() * Version 1.4 12-Jan-2009 fix:
	 * GetPointsAtDistance() * Version 3.0 11-Aug-2010 update to v3 * * \
	 **************************************************************************/

	// === first support methods that don't (yet) exist in v3
	google.maps.LatLng.prototype.distanceFrom = function (newLatLng) {
	    var EarthRadiusMeters = 6378137.0; // meters
	    var lat1 = this.lat();
	    var lon1 = this.lng();
	    var lat2 = newLatLng.lat();
	    var lon2 = newLatLng.lng();
	    var dLat = (lat2 - lat1) * Math.PI / 180;
	    var dLon = (lon2 - lon1) * Math.PI / 180;
	    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
	    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
	    var d = EarthRadiusMeters * c;
	    return d;
	}

	google.maps.LatLng.prototype.latRadians = function () {
	    return this.lat() * Math.PI / 180;
	}

	google.maps.LatLng.prototype.lngRadians = function () {
	    return this.lng() * Math.PI / 180;
	}

	// === A method which returns the length of a path in metres ===
	google.maps.Polygon.prototype.Distance = function () {
	    var dist = 0;
	    for (var i = 1; i < this.getPath().getLength(); i++) {
	        dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));
	    }
	    return dist;
	}

	// === A method which returns a GLatLng of a point a given distance along
	// the path ===
	// === Returns null if the path is shorter than the specified distance ===
	google.maps.Polygon.prototype.GetPointAtDistance = function (metres) {
	    // some awkward special cases
	    if (metres == 0) return this.getPath().getAt(0);
	    if (metres < 0) return null;
	    if (this.getPath().getLength() < 2) return null;
	    var dist = 0;
	    var olddist = 0;
	    for (var i = 1;
	    (i < this.getPath().getLength() && dist < metres); i++) {
	        olddist = dist;
	        dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));
	    }
	    if (dist < metres) {
	        return null;
	    }
	    var p1 = this.getPath().getAt(i - 2);
	    var p2 = this.getPath().getAt(i - 1);
	    var m = (metres - olddist) / (dist - olddist);
	    return new google.maps.LatLng(p1.lat() + (p2.lat() - p1.lat()) * m, p1.lng() + (p2.lng() - p1.lng()) * m);
	}

	// === A method which returns an array of GLatLngs of points a given
	// interval along the path ===
	google.maps.Polygon.prototype.GetPointsAtDistance = function (metres) {
	    var next = metres;
	    var points = [];
	    // some awkward special cases
	    if (metres <= 0) return points;
	    var dist = 0;
	    var olddist = 0;
	    for (var i = 1;
	    (i < this.getPath().getLength()); i++) {
	        olddist = dist;
	        dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));
	        while (dist > next) {
	            var p1 = this.getPath().getAt(i - 1);
	            var p2 = this.getPath().getAt(i);
	            var m = (next - olddist) / (dist - olddist);
	            points.push(new google.maps.LatLng(p1.lat() + (p2.lat() - p1.lat()) * m, p1.lng() + (p2.lng() - p1.lng()) * m));
	            next += metres;
	        }
	    }
	    return points;
	}

	// === A method which returns the Vertex number at a given distance along
	// the path ===
	// === Returns null if the path is shorter than the specified distance ===
	google.maps.Polygon.prototype.GetIndexAtDistance = function (metres) {
	    // some awkward special cases
	    if (metres == 0) return this.getPath().getAt(0);
	    if (metres < 0) return null;
	    var dist = 0;
	    var olddist = 0;
	    for (var i = 1;
	    (i < this.getPath().getLength() && dist < metres); i++) {
	        olddist = dist;
	        dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));
	    }
	    if (dist < metres) {
	        return null;
	    }
	    return i;
	}
	// === Copy all the above functions to GPolyline ===
	google.maps.Polyline.prototype.Distance = google.maps.Polygon.prototype.Distance;
	google.maps.Polyline.prototype.GetPointAtDistance = google.maps.Polygon.prototype.GetPointAtDistance;
	google.maps.Polyline.prototype.GetPointsAtDistance = google.maps.Polygon.prototype.GetPointsAtDistance;
	google.maps.Polyline.prototype.GetIndexAtDistance = google.maps.Polygon.prototype.GetIndexAtDistance;
	
	/*
	 * -----------------------------------------the end for vehicle icon
	 * movement---------------------------------------------------------------
	 * 
	 */
		
	$scope.singleDeviceZoomLevel=21;
	$scope.multipleDeviceZoomLevel=3;
	$scope.mars = 10;
	$scope.isZoomed = true;// reCenter button for group based
	$scope.singleDeviceZoomed = true;// reCenter button for single device
										// based
	$scope.deviceList = [];
	var speedValue=0;									
	var devIDval="";
	var speedlimit="";
	
	$scope.chart;

	/*
	 * var MarkersOnload=[]; var mapPosOnload={}; var polygonOnload=[]; var
	 * scope = angular.element(document.getElementById("smartMap")).scope();
	 * scope.updateMap(MarkersOnload, mapPosOnload,polygonOnload);
	 */
	// Count of vehicle count
	var multiDeviceInterval, singleDeviceInterval;
	$scope.multiDevice = false;
	$scope.singleDevice = false;
	$scope.carCount = 0;
	$scope.jeepCount = 0;
	$scope.bikeCount = 0;
	$scope.busCount = 0;
	$scope.truckCount = 0;
	$scope.admingroup = {};
	$scope.admingroup.token = $scope.token;
	// console.log($scope.admingroup);
	$http({
		method : 'POST',
		url : apiURL + 'group/list',
		data : JSON.stringify($scope.admingroup),
		headers : {
			'Content-Type' : 'application/json'
		}
	}).success(function(data) {
		// console.log(JSON.stringify(data));
		listGroup(data);
	}).error(function(data, status, headers, config) {
		console.log(data);
		if (data.err == "Expired Session") {
			expiredSession();
			$localStorage.$reset();
		} else if (data.err == "Invalid User") {
			invalidUser();
			$localStorage.$reset();
		}
		console.log(status);
		console.log(headers);
		console.log(config);		
	});
	/**
	 * function to list the group id and name
	 */

	function listGroup(data) {
		var glist = [];
		for ( var inc = 0; inc < data.glist.length; inc++) {
			glist.push(data.glist[inc]);
		}
		$scope.groupList = glist;
		// console.log($scope.groupList);
	}
	/**
	 * fetch device list based on group id
	 */
	$scope.fetchDevicelist = function(groupID) {		
		$scope.httpLoading=true;
	    $('#clearTextDevice span.select2-chosen').empty();  
	    $('#clearTextDevice span.select2-chosen').text("- - Select Device - -"); 
		storage_arr=[];// clearing the matched array on change of group id
						// dropdown
		setMapOnAll(null);
		if(myPolygon){
			setPolygonNull();
		}
		$scope.isZoomed = true;// reCenter button for group based
		$scope.singleDeviceZoomed = true;// reCenter button for single device
											// based
		// document.getElementById("groupNamelist").blur();
		// console.log(groupID);
		$scope.groupdevicejson = {};
		$scope.groupdevicejson.token = $scope.token;
		$scope.groupdevicejson.gid = groupID;
		/**
		 * get device list based on group ID
		 */

		$http({
			method : 'POST',
			url : apiURL + 'group/devlist',
			data : JSON.stringify($scope.groupdevicejson),
			headers : {
				'Content-Type' : 'application/json'
			}
		}).success(function(data) {			
			if (angular.isDefined(multiDeviceInterval)) {
				$interval.cancel(multiDeviceInterval);
			} else if (angular.isDefined(singleDeviceInterval)) {
				$interval.cancel(singleDeviceInterval);
			}
			$scope.groupDevice = data;
			// console.log(JSON.stringify($scope.groupDevice));
			$scope.carCount = $scope.groupDevice.carcount;
			$scope.bikeCount = $scope.groupDevice.bikecount;
			$scope.busCount = $scope.groupDevice.buscount;
			$scope.truckCount = $scope.groupDevice.truckcount;
			var dev_len = $scope.groupDevice.devlist.length;
			$scope.devlistObject=$scope.groupDevice.devlist
			var devlist = $scope.groupDevice.devlist;
			$scope.deviceList=[];
			for ( var i = 0; i < dev_len; i++) {
				$scope.deviceList.push(devlist[i].devid);
			}
			plotDevices();			
			// multiDeviceInterval = $interval(plotDevices, reqTime * 1000);
			// console.log(multiDeviceInterval);
		}).error(function(data, status, headers, config) {
			console.log(data);
			console.log(status);
			console.log(headers);
			console.log(config);
			if (data.err == "Expired Session") {
				expiredSession();
				$localStorage.$reset();
			} else if (data.err == "Invalid User") {
				invalidUser();
				$localStorage.$reset();
			}
		}).finally(function(){		
			$scope.httpLoading=false;
		});
	};
	/**
	 * fetch device information
	 */
	$scope.fetchDeviceDetail = function(gid, deviceId) {
		// console.log(deviceId)
		// $scope.initialize();
		// $scope.isZoomed = true;// reCenter button for group based
		$scope.singleDeviceZoomed = true;// reCenter button for single device based
		$scope.devIDval = deviceId;
		devIDval=deviceId;
		$scope.multiDevice = false;
		$scope.singleDevice = true;
		if (angular.isDefined(multiDeviceInterval)) {
			$interval.cancel(multiDeviceInterval);
		} else if (angular.isDefined(singleDeviceInterval)) {
			$interval.cancel(singleDeviceInterval);
		}
		$scope.selectedgroupdevicejson = {};
		$scope.selectedgroupdevicejson.token = $scope.token;
		$scope.selectedgroupdevicejson.gid = $scope.groupdevicejson.gid;
		storedltlng={};	
		geofenceAPI($scope.selectedgroupdevicejson);
		setMapOnAll(null);
		map.setZoom($scope.singleDeviceZoomLevel);
		//console.log(map.getZoom());
		plotDevice();		
		singleDeviceInterval = $interval(plotDevice,reqTime * 1000);		
	};
	
	/**
	 * ----------------------------------------------------------------------------------------------------------------------------------------------------
	 * 
	 * plot group based device on the map
	 * ---------------------------------------------------------------------------------------------------------------------------------------------------
	 */
	function geofenceAPI(groupdevicejson){
		/*
		 * get device info based on group ID
		 */
		$http({
			method : 'POST',
			url : apiURL + 'group/info',
			data : JSON.stringify(groupdevicejson),
			headers : {
				'Content-Type' : 'application/json'
			}
		}).success(function(data) {			
			// console.log(data);
			// reqTime = data.time_interval;
			maxSpeed = data.speed_limit;

			var geoJson = data.geofence;			
			var resultGeoJson = [];
			for ( var key in geoJson) {
				if (geoJson.hasOwnProperty(key)) {
					
					resultGeoJson.push({
						'lat' : geoJson[key].lat,
						'lng' : geoJson[key].long
					});
				}
			}
			// console.log(JSON.stringify(resultGeoJson));
			var geofence_plot = resultGeoJson;
		    plotGeofence(geofence_plot);
		}).error(function(data, status, headers, config) {
			if (data.err == "Expired Session") {
				expiredSession();
				$localStorage.$reset();
			} else if (data.err == "Invalid User") {
				invalidUser();
				$localStorage.$reset();
			}
			console.log(data);
			console.log(status);
			console.log(headers);
			console.log(config);
		});
	}
	function plotGeofence(geofence_plot){
		// alert("Geofence");
		// alert(geofence_plot);
		// console.log(JSON.stringify(geofence_plot));
		myPolygon = new google.maps.Polygon({
	        paths: geofence_plot,
	        // draggable: true, // turn off if it gets annoying
	        // editable: true,
	        strokeColor: '#FF0000',
	        strokeOpacity: 0.8,
	        strokeWeight: 2,
	        fillColor: '#FF0000',
	        fillOpacity: 0.10
	      });
	      myPolygon.setMap(map);
	}
	function plotDevices(){
		// console.log("group");
		// console.log($scope.deviceList.length);
		$scope.devicejson = {};
		$scope.devicejson.token = $scope.token;	
		$scope.devicejson.devlist = $scope.deviceList;
		$http({
			method : 'POST',
			url : apiURL + 'device/currentdata',
			data : JSON.stringify($scope.devicejson),
			headers : {
				'Content-Type' : 'application/json'
			}
		}).success(function(data) {
		        console.log(JSON.stringify(data));
				geofenceAPI($scope.groupdevicejson);			
				$scope.multiDevice = true;				
				$scope.singleDevice = false;
				displayData(data);			
			
			var bounds = new google.maps.LatLngBounds();
			for(var i=0;i<data.length;i++){	
					if(data[i].devtype == "car"){
					icon.path = carIcon;		   
				   }
				   else if(data[i].devtype == "bus"){
					   icon.path = busIcon;
				   }
				   else if(data[i].devtype == "truck"){
					   icon.path = truckIcon;
				   }
				   else if(data[i].devtype == "bike"){
					   icon.path = bikeIcon;
				   }
				   else{
					   icon.path = markerIcon;
				   }
			if(data[i].values.length>0){				
				createMarker(new google.maps.LatLng(data[i].values[0].lat, data[i].values[0].long),data[i].devid,data[i].vehicle_num,data[i].vehicle_model,"",data[i].values[0].type);			 
				bounds.extend(new google.maps.LatLng(data[i].values[0].lat, data[i].values[0].long));						    
			}
			else{
				swal('Device of id '+data[i].devid+' is not updating kindly check it');
			}
			
			}
			map.fitBounds(bounds);
		}).error(function(data, status, headers, config) {
			if (data.err == "Expired Session") {
				expiredSession();
				$localStorage.$reset();
			} else if (data.err == "Invalid User") {
				invalidUser();
				$localStorage.$reset();
			}
			console.log(data);
			console.log(status);
			console.log(headers);
			console.log(config);
		});
		
	}
	function plotDevice(){
		console.log("single"+$scope.zoomlevel);
		/*if ($scope.zoomlevel < 18 || $scope.zoomlevel > 21) {
		
		$scope.singleDeviceZoomed = false;
		if (angular.isDefined(singleDeviceInterval)) {
			$interval.cancel(singleDeviceInterval);
		} else if (angular.isDefined(multiDeviceInterval)) {
			$interval.cancel(multiDeviceInterval);
		}
	} else {*/
		$scope.deviceJson = {};
		$scope.deviceJson.token = $scope.token;
		var obj = [];
		obj.push(devIDval);
		$scope.deviceJson.devlist = obj;
		$scope.deviceJson.count = 1;
		$http({
			method : 'POST',
			url : apiURL + 'device/currentdata',
			data : JSON.stringify($scope.deviceJson),
			headers : {
				'Content-Type' : 'application/json'
			}
		}).success(function(data) {	
			 console.log(JSON.stringify(data));
				$scope.multiDevice = false;
				if(data[0].values.length>0){				
					$scope.singleDevice = true;		
					speedValue=data[0].values[0].Velocity;					
					speedlimit=data[0].speed_limit;				
					// request for geofence plotting
					// vechile count updation based on type
					$scope.carCount = 0;
					$scope.bikeCount = 0;
					$scope.busCount = 0;
					$scope.truckCount = 0;
					if(data[0].devtype=="car"){				
						$scope.carCount = 1;
						icon.path = carIcon;		
					}
					else if(data[0].devtype=="bus"){
						$scope.busCount = 1;
						icon.path = busIcon;
					}else if(data[0].devtype=="truck"){
						$scope.truckCount = 1;
						icon.path = truckIcon;
					}else if(data[0].devtype=="bike"){
						$scope.bikeCount = 1;
						icon.path = bikeIcon;
					}
					else{$scope.carCount = 0;
					$scope.bikeCount = 0;
					$scope.busCount = 0;
					$scope.truckCount = 0;
					icon.path = markerIcon;
					}
					$scope.speedSpeedOmeter=speedValue;
					$scope.vehnoSpeedOmeter=data[0].vehicle_num;
					$scope.speedlimitSpeedOmeter=speedlimit;
					$scope.dateTimeSpeedOmeter=getDateTime(data[0].values[0].ts);
					updateSpeed(data[0].vehicle_num,data[0].values[0].Velocity,data[0].speed_limit,getDateTime(data[0].values[0].ts));				
					// storedltlng.lat=data[0].values[0].lat;
					/* vehichleRouting(data,data[0].values[0].lat,data[0].values[0].long,data[0].values[0].lat,data[0].values[0].long); */
					$scope.calcRoute(data);
			}
			else{
				$scope.singleDevice = false;
				$scope.carCount = 0;
				$scope.bikeCount = 0;
				$scope.busCount = 0;
				$scope.truckCount = 0;
				swal('Device of id '+data[0].devid+' is not updating kindly check it');
			}
		
								
		}).error(function(data, status, headers, config) {
			if (data.err == "Expired Session") {
				expiredSession();
				$localStorage.$reset();
			} else if (data.err == "Invalid User") {
				invalidUser();
				$localStorage.$reset();
			}
			console.log(data);
			console.log(status);
			console.log(headers);
			console.log(config);
		});
	//}
	}
	function getDateTime(ts){
		var d = new Date(Number(ts));
		// console.log(d.getDate()+"-"+d.getMonth()+"-"+d.getFullYear());
		var monthVal = d.getMonth() + 1;
		// Hours part from the timestamp
		var hours = d.getHours();
		// Minutes part from the timestamp
		var minutes = "0" + d.getMinutes();
		// Seconds part from the timestamp
		var seconds = "0" + d.getSeconds();

		// Will display time in 10:30:23 format
		var formattedTime = hours + ':'
				+ minutes.substr(-2) + ':'
				+ seconds.substr(-2);
		return formattedTime+","+d.getDate() + "/" + monthVal + "/"
				+ d.getFullYear();
	}
	/**------------------------------------------------------------------------------------------------------
	 * function for recenter to re intiate the live tracking or request for
	 * current data
	 
	$scope.reCenter = function() {
		map.zoom = $scope.multipleDeviceZoomLevel;
		$scope.isZoomed = true;
		multiDeviceInterval = $interval(getCurrentData, reqTime * 1000);
	};
	------------------------------------------------------------------------------------------------------*/
	/**
	 * function for recenter the single device selection
	 */
	$scope.reCenterDevice = function() {
		console.log("Single Device Re Center");
		map.setZoom($scope.singleDeviceZoomLevel);
		map.panTo(marker.getPosition());
		$scope.singleDeviceZoomed = true;
		if (angular.isDefined(singleDeviceInterval)) {
			$interval.cancel(singleDeviceInterval);
		} else if (angular.isDefined(multiDeviceInterval)) {
			$interval.cancel(multiDeviceInterval);
		}		
		singleDeviceInterval = $interval(plotDevice, reqTime * 1000);
	};
	
	/**
	 * function to display current speed of all devices in the selected group
	 * and display it in the table
	 */
	function displayData(deviceData) {
		// console.log(JSON.stringify(deviceData));
		$scope.devData = {};
		for ( var inc = 0; inc < deviceData.length; inc++) {
			 // console.log(JSON.stringify(deviceData));
			var devId = deviceData[inc].devid;
			// console.log(devId);
			if(deviceData[inc].values.length>0){
				var devSpeed = deviceData[inc].values[0].Velocity;
				$scope.devData[devId] = devSpeed;
				$scope.speedlimit = deviceData[inc].speed_limit;
			}
			else{
				swal('Device of id '+deviceData[inc].devid+' is not updating kindly check it');
			}
			
			// console.log($scope.speedlimit);
		}
		 
	}
	/* clear markers*/
	function clearMarkers(){
		google.maps.Map.prototype.markers = new Array();

		google.maps.Map.prototype.getMarkers = function() {
		    return this.markers
		};

		google.maps.Map.prototype.clearMarkers = function() {
		    for(var i=0; i<this.markers.length; i++){
		        this.markers[i].setMap(null);
		    }
		    this.markers = new Array();
		};
	}
	/*------------------------------------------------------------------------------------------------------------------------
	 * 
	 *                                           angular gauge speedometer 
	 *                                           
	 *------------------------------------------------------------------------------------------------------------------------ */
	/**
	 * function to update the speedometer
	 */
	function updateSpeed(vehNo,speed,speed_limit,ts) {	
		//console.log("sas");
		/*$('#container').highcharts().setTitle({text: "<label>Vehicle No:</label><p>" + vehNo
			+ "</p><br/><br/><label>Speed Limit:</label><p><b>"
			+ speed_limit + "<b>KmpH</p><br/><br/><label>DateTime:</label><b>"
			+ts+"</b>"});*/
		$('#container').highcharts().series[0].points[0].update(Number(speed));		
	}
	 $('#container').highcharts({
		 
	        chart: {
	            type: 'gauge',
	            plotBackgroundColor: null,
	            plotBackgroundImage: null,
	            plotBorderWidth: 0,
	            plotShadow: false,
	            width:'200',
	            height:'200'
	        },

	        title : {
				text : ""
			},

	        pane: {
	            startAngle: -150,
	            endAngle: 150,
	            background: [{
	                backgroundColor: {
	                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
	                    stops: [
	                        [0, '#FFF'],
	                        [1, '#333']
	                    ]
	                },
	                borderWidth: 0,
	                outerRadius: '109%'
	            }, {
	                backgroundColor: {
	                    linearGradient: { x1: 0, y1: 0, x2: 0, y2: 1 },
	                    stops: [
	                        [0, '#333'],
	                        [1, '#FFF']
	                    ]
	                },
	                borderWidth: 1,
	                outerRadius: '107%'
	            }, {
	                // default background
	            }, {
	                backgroundColor: '#DDD',
	                borderWidth: 0,
	                outerRadius: '105%',
	                innerRadius: '103%'
	            }]
	        },

	        // the value axis
	        yAxis: {
	            min: 0,
	            max: 200,

	            minorTickInterval: 'auto',
	            minorTickWidth: 1,
	            minorTickLength: 10,
	            minorTickPosition: 'inside',
	            minorTickColor: '#666',

	            tickPixelInterval: 30,
	            tickWidth: 2,
	            tickPosition: 'inside',
	            tickLength: 10,
	            tickColor: '#666',
	            labels: {
	                step: 2,
	                rotation: 'auto'
	            },
	            title: {
	                text: 'km/h'
	            },
	            plotBands: [{
	                from: 0,
	                to: 120,
	                color: '#55BF3B' // green
	            }, {
	                from: 120,
	                to: 160,
	                color: '#DDDF0D' // yellow
	            }, {
	                from: 160,
	                to: 200,
	                color: '#DF5353' // red
	            }]
	        },

	        series: [{
	            name: 'Speed',
	            data: [Number(speedValue)],
	            tooltip: {
	                valueSuffix: ' km/h'
	            }
	        }]

	    },
	    // Add some life
	    function (chart) {	    	
	        if (!chart.renderer.forExport && chart.length>0) {
	            setInterval(function () {
	            	// console.log(speedlimit);
	            	chart.setTitle({text: "<label>Device ID:</label><p>" + devIDval
	    				+ "</p><br/><br/><label>Speed Limit:</label><p><b>"
	    				+ speedlimit + "<b>KmpH</p>"});
	                var point = chart.series[0].points[0],
	                    newVal,                    
	                    inc = Math.round((Math.random() - 0.5) * 20);	               								
	                newVal = point.y + inc;
	                if (newVal < 0 || newVal > 200) {
	                    newVal = point.y - inc;
	                }

	                point.update(Number(speedValue));

	            }, reqTime*1000);
	        }
	    });
	
	/*------------------------------------------------------------------------------------------------------------------------
	 * 
	 *                                           the end of angular gauge speedometer 
	 *                                           
	 *------------------------------------------------------------------------------------------------------------------------ */

	/**
	 * On load of customer name 1)Filter customer name 2)Select customer name
	 */
	// var tagsData = cname;
	// init jquery functions and plugins
	$(document).ready(function() {
		$.getScript('../assets/select_filter/select2.min.js', function() {
			console.log("check");
			$("#selectGroup").select2({});
			$("#selectDevice").select2({});
			$('#clearTextGroup span.select2-chosen').text("Select Group");
			$('#clearTextDevice span.select2-chosen').text("Select Vehicle No / Device");			
			$(document).on('input','.select2-input',function(){
				/*console.log("input");*/
				$('.dropdownSection').css('top','20%');				
			});
			$(document).on('keyup','.select2-input',function(){
				/*console.log("keyup");*/
				$('.dropdownSection').css('top','20%');				
			});
			$(document).on('keydown','.select2-input',function(){
				/*console.log("keydown");*/
				$('.dropdownSection').css('top','20%');				
			});
			$(document).on('mouseenter','.map_content',function(){		
				$('.dropdownSection').css('top','20%');				
			});
			$(document).on('mouseleave','.map_content',function(){		
				$('.dropdownSection').css('top','-20%');				
			});
			
		});// script
	});
	
	
	

	/**
	 * Refresh map for particular time interval cancels on location change
	 */
	$scope.$on('$locationChangeStart', function(){
		if (angular.isDefined(multiDeviceInterval)) {
			$interval.cancel(multiDeviceInterval);
		} else if (angular.isDefined(singleDeviceInterval)) {
			$interval.cancel(singleDeviceInterval);
		}
	});
	/*
	 * Show/Hide Traffic Layer on map
	 */
	$scope.showTrafficLayer = function(){
		// alert("show traffic layer");
		trafficLayer.setMap(map);
		$scope.showTrafficLayerBtn = true;
		$scope.hideTrafficLayerBtn = false;
	}
	$scope.hideTrafficLayer = function(){
		// alert("hide traffic layer");
		trafficLayer.setMap(null);
		$scope.showTrafficLayerBtn = false;
		$scope.hideTrafficLayerBtn = true;
	}
	/**
	 * ------------------------------------------------------------------------------------------------------------------------------------
	 * -------------------------------------------------------- device detail
	 * modal --------------------------------------------------------
	 */
	$scope.open = function(size, deviceId) {	
		console.log("check");
		$scope.deviceInfojson = {};
		$scope.deviceInfojson.token = $scope.token;
		$scope.deviceInfojson.devid = deviceId;
		var devData;
		/*---------------------- Vechile Info API CALL -------------------------------------*/
		$http({
			method : 'POST',
			url : apiURL + 'device/info',
			data : JSON.stringify($scope.deviceInfojson),
			headers : {
				'Content-Type' : 'application/json'
			}
		}).success(function(data) {
			var modalInstance = $uibModal.open({
				animation : $scope.animationsEnabled,
				templateUrl : '/html/admin/myModalContent.html',
				controller : 'ModalInstanceCtrl',
				directive:'phone',
				size : size,
				resolve : {
					dev : function() {
						return data;
					}
				}
			});
		}).error(function(data, status, headers, config) {
			if (data.err == "Expired Session") {
				expiredSession();
				$localStorage.$reset();
			} else if (data.err == "Invalid User") {
				invalidUser();
				$localStorage.$reset();
			}
			console.log(data);
			console.log(status);
			console.log(headers);
			console.log(config);
		});
	};
});

/*
 * ----------------------------------------------------- end of map controller
 * ----------------------------------------------------------------------
 */

batsAdminHome.controller('dateCtrl', function($scope) {
	$scope.myDate = new Date();
	$scope.minDate = new Date($scope.myDate.getFullYear(), $scope.myDate
			.getMonth() - 2, $scope.myDate.getDate());
	$scope.maxDate = new Date($scope.myDate.getFullYear(), $scope.myDate
			.getMonth() + 2, $scope.myDate.getDate());
	$scope.onlyWeekendsPredicate = function(date) {
		var day = date.getDay();
		return day === 0 || day === 6;
	};
	$scope.myDateChange = function(mydate) {
	};
});

batsAdminHome.controller('AdminController', function($scope, $interval, $http,
		$localStorage) {
	$scope.getGrouplist = function() {
		/**
		 * Load Group list 1) on load of page load the Group_name, Country,
		 * State in the dropdown 2) Load Group details in grid
		 */
		$scope.token = $localStorage.data;
		if (typeof $scope.token === "undefined") {
			swal({
				title : "Un Authorized Acces",
				text : "Kindly Login!",
				type : "warning",
				confirmButtonColor : "#ff0000",
				closeOnConfirm : false
			}, function() {
				$localStorage.$reset();
				window.location = apiURL;
			});

		}
		$scope.customer = {};
		$scope.customer.token = $scope.token;
		// $scope.customer.id = $scope.token;
		// console.log(JSON.stringify($scope.customer));
		$http({
			method : 'POST',
			url : apiURL + 'group/list',
			data : JSON.stringify($scope.customer),
			headers : {
				'Content-Type' : 'application/json'
			}
		}).success(function(data) {
			$scope.glist = data.glist;
			// console.log(JSON.stringify($scope.glist));
		}).error(function(data, status, headers, config) {
			// console.log(data.err);
			console.log(data);
			console.log(status);
			console.log(headers);
			console.log(config);
			if (data.err == "Expired Session") {
				expiredSession();
				$localStorage.$reset();
			} else if (data.err == "Invalid User") {
				invalidUser();
				$localStorage.$reset();
			}
		});

	};
	

	
});

/**
 * ------------------------------------------------------------------------------------------------------------------------------------------
 * ModalInstanceCtrl
 * ------------------------------------------------------------------------------------------------------------------------------------------
 */
// Please note that $modalInstance represents a modal window (instance)
// dependency.
// It is not the same as the $uibModal service used above.

angular
		.module('batsAdminHome')
		.controller(
				'ModalInstanceCtrl',
				function($scope, $http, $uibModalInstance, dev, $localStorage) {
					// for history tab hide the map and table part intially
					$scope.token = $localStorage.data;
					$scope.dev = dev;
					$scope.ok = function() {
						$uibModalInstance.close($scope.selected.item);
					};

					$scope.cancel = function() {
						$uibModalInstance.dismiss('cancel');
					};
					/**
					 * get Date formatted date based on TIMESTAMP
					 * -----------------------------------------------------------------------
					 */
					$scope.getDate = function(ts) {
						var d = new Date(Number(ts));
						// console.log(d.getDate()+"-"+d.getMonth()+"-"+d.getFullYear());
						var monthVal = d.getMonth() + 1;
						// Hours part from the timestamp
						var hours = d.getHours();
						// Minutes part from the timestamp
						var minutes = "0" + d.getMinutes();
						// Seconds part from the timestamp
						var seconds = "0" + d.getSeconds();

						// Will display time in 10:30:23 format
						var formattedTime = hours + ':'
								+ minutes.substr(-2) + ':'
								+ seconds.substr(-2);
						return d.getDate() + "-" + monthVal + "-"
								+ d.getFullYear() + " / "
								+ formattedTime;
					}
					/**
					 * Change Image of Device based on device Type
					 * -----------------------------------------------------------------------------
					 */
					$scope.whatVehicle = function() {
						if ($scope.dev.devtype == "car") {
							$scope.url = 'https://encrypted-tbn3.gstatic.com/images?q=tbn:ANd9GcQnBx8Czkt93BZhCcIWGh-3eHuv8CH613GrTCpah6RP9b7LyxIJjw';
						} else if ($scope.dev.devtype == "bus") {
							$scope.url = 'http://www.myiconfinder.com/uploads/iconsets/256-256-3ac514df5b4f36e2d8d525fe7f63b83c.png'
						} else if ($scope.dev.devtype == "bike") {
							$scope.url = 'https://cdn0.iconfinder.com/data/icons/travel-line-icons-vol-1/48/022-512.png';
						} else if ($scope.dev.devtype == "truck") {
							$scope.url = 'http://www.wpclipart.com/transportation/car/icons_BW/flatbed_truck_BW_icon.png';
						}
					}
					/**
					 * API Call for Device History
					 * ---------------------------------------------------------------------------
					 */
					$scope.myDate = new Date();
					$scope.minDate = new Date($scope.myDate.getFullYear(),
							$scope.myDate.getMonth() - 2, $scope.myDate
									.getDate());
					$scope.maxDate = new Date($scope.myDate.getFullYear(),
							$scope.myDate.getMonth() + 2, $scope.myDate
									.getDate());
					$scope.onlyWeekendsPredicate = function(date) {
						var day = date.getDay();
						return day === 0 || day === 6;
					};
					
					/**
					 * Current Data API Call from
					 * here-------------------------------------------
					 */
					$scope.showCurrentData = function() {
						$scope.deviceCurrentDatajson = {};
						$scope.devIdobj = [];
						$scope.deviceCurrentDatajson.token = $scope.token;
						$scope.devIdobj.push(dev.devid);
						$scope.deviceCurrentDatajson.devlist = $scope.devIdobj;
						// $scope.deviceCurrentDatajson.devlist = dev.devid;
						$scope.deviceCurrentDatajson.count = 10;
						// console.log($scope.deviceCurrentDatajson);
						$http(
								{
									method : 'POST',
									url : apiURL + 'device/currentdata',
									data : JSON
											.stringify($scope.deviceCurrentDatajson),
									headers : {
										'Content-Type' : 'application/json'
									}
								})
								.success(
										function(data) {
											$scope.currData = data[0];
										}).error(
										function(data, status, headers,
												config) {
											if (data.err == "Expired Session") {
												expiredSession();
												$localStorage.$reset();
											} else if (data.err == "Invalid User") {
												invalidUser();
												$localStorage.$reset();
											}
											console.log(data);
											console.log(status);
											console.log(headers);
											console.log(config);
										});
					};
					/**
					 * Device Settings API CALL Made
					 * here---------------------------
					 */
					$scope.device = {};
					$scope.submitSettings = function() {
						$scope.device.token = $scope.token;
						$scope.device.devid = dev.devid;
						/*
						 * var obj = []; obj.push($scope.device.contact_num)
						 * delete $scope.device['contact_num'];
						 * $scope.device.contact_num = obj;
						 */
						console.log($scope.device);
						$http({
							method : 'POST',
							url : apiURL + 'device/easyupdate',
							data : JSON.stringify($scope.device),
							headers : {
								'Content-Type' : 'application/json'
							}
						}).success(function(data) {
							// console.log(JSON.stringify(data));
							swal({title: "Settings Changed Successfully",
								   text: "Success!",   
								   type: "success",   
								   confirmButtonColor: "#9afb29",   
								   closeOnConfirm: false }, 
								   function(){   
									   $scope.data = data;
									   console.log(JSON.stringify($scope.data));
									   location.reload();
							});
						})
								.error(
										function(data, status, headers,
												config) {											
											if (data.err == "Expired Session") {
												expiredSession();
												$localStorage.$reset();
											} else if (data.err == "Invalid User") {
												invalidUser();
												$localStorage.$reset();
											}
											console.log(data);
											console.log(status);
											console.log(headers);
											console.log(config);
										});
					};

				})/*
					 * .directive('phone', function() { return { restrice: 'A',
					 * require: 'ngModel', link: function(scope, element, attrs,
					 * ctrl) { angular.element(element).bind('blur', function() {
					 * var value = this.value; if(PHONE_REGEXP.test(value)) { //
					 * Valid input //console.log("valid phone number"+value);
					 * angular.element(this).next().next().css('display','none');
					 * scope.btnDisabled = true; } else { scope.btnDisabled =
					 * true; // Invalid input console.log("invalid phone
					 * number"+value); scope.mobstatus="invalid phone number";
					 * angular.element(this).next().next().css('display','block');
					 * console.log(angular.element(this).children().find('span'));
					 * 
					 * Looks like at this point ctrl is not available, so I
					 * can't user the following method to display the error
					 * node: ctrl.$setValidity('currencyField', false); } }); } }; })
					 */;